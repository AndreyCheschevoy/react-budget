{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAiHeA,G,uLAlFX,OACE,iCACE,gCACE,wD,GA3BQC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.28856ea3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n// import Expanse from './Expanse';\n// import Incomes from './Incomes';\n// import moment from 'moment';\n// import styled from 'styled-components';\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     date: moment(),\n  //     navSelected: 'expanse'\n  //   }\n  // }\n\n  // handleAddDay = () => {\n  //   this.setState({ date: this.state.date.add(1, 'day') });\n  // };\n\n  // handleSubtractDay = () => {\n  //   this.setState({ date: this.state.date.subtract(1, 'day') });\n  // };\n\n  // handleNavClick = event => {\n  //   this.setState({ navSelected: event.target.getAttribute('name') });\n  // };\n\n  render() {\n    // const { date, navSelected } = this.state\n    return (\n      <section>\n        <header>\n          <h1>Budget calculation</h1>\n          {/* <div className=\"dataLine\">\n            <p>{date.format('DD.MM.YYYY')}</p>\n            <DateButton onClick={this.handleSubtractDay}>-</DateButton>\n            <DateButton onClick={this.handleAddDay}>+</DateButton>\n          </div>\n          <p>На сегодня: 1000 грн.</p> */}\n        </header>\n        {/* <main>\n          <Nav>\n            <Link\n              name=\"expanse\"\n              onClick={this.handleNavClick}\n              selected={navSelected === 'expanse'}\n            >\n              Расходы сегодня\n            </Link>\n\n            <Link\n              name=\"incomes\"\n              onClick={this.handleNavClick}\n              selected={navSelected === 'incomes'}\n            >\n              Доходы\n            </Link>\n          </Nav>\n\n          {navSelected === 'expanse' ? (\n            <Expanse onSubmit={this.handleSubmitTransaction} />\n          ) : (\n              <Incomes onSubmit={this.handleSubmitTransaction} />\n            )}\n\n          <Table>\n            <tbody>\n\n            </tbody>\n          </Table>\n        </main> */}\n      </section>\n    );\n  }\n}\n\n// const DateButton = styled.button`\n//   color: white;\n//   border: 1px solid white;\n//   border-radius: 50%;\n//   background-color: transparent;\n//   width: 32px;\n//   height: 32px;\n//   margin: 3px;\n//   cursor: pointer;\n//   text-align: center;\n// `;\n\n// const Link = styled.span`\n//   font-family: 'Marmelad';\n//   cursor: pointer;\n//   color: white;\n//   margin: 0 8px;\n//   border-bottom: ${({ selected }) =>\n//     selected ? '2px solid white' : 'none'};\n// `;\n\n// const Nav = styled.nav`\n//   display: flex;\n//   justify-content: center;\n//   font-size: 25px;\n//   padding: 40px 0 15px;\n// `;\n\n// const Table = styled.table`\n//   width: 450px;\n//   text-align: right;\n//   padding-top: 30px;\n//   margin: 0 auto;\n// `;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}