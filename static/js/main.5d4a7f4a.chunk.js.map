{"version":3,"sources":["Expanse.js","Incomes.js","App.js","serviceWorker.js","index.js"],"names":["Expanse","state","transaction","category","handleChangeInput","event","setState","target","name","value","handleEnter","onSubmit","props","Math","abs","parseFloat","this","Container","InputLine","LineTitle","LineInput","Input","onChange","Button","onClick","Component","styled","article","div","input","dt","dd","button","Incomes","App","handleAddDay","date","add","handleSubtractDay","subtract","handleNavClick","navSelected","getAttribute","handleSubmitTransaction","sum","TodayDate","transactions","newTransaction","format","newTransactions","sort","a","b","aDate","moment","bDate","isAfter","onToday","currentMonthTransactions","filter","transactionDate","isSame","dailyMoney","reduce","acc","daysInMonth","expanseBeforeToday","isBefore","incomeBeforeToday","console","log","toFixed","initState","storageState","localStorage","getItem","JSON","parse","setItem","stringify","className","DateButton","Nav","Link","selected","Table","map","index","key","span","nav","table","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d4a7f4a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport class Expanse extends Component {\r\n    state = {\r\n        transaction: null,\r\n        category: null,\r\n    };\r\n\r\n    handleChangeInput = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    handleEnter = () => {\r\n        const { onSubmit } = this.props;\r\n        const { transaction, category } = this.state;\r\n\r\n        onSubmit(-1 * Math.abs(parseFloat(transaction)), category);\r\n        this.setState({ transaction: null, category: null });\r\n    }\r\n\r\n    render() {\r\n        const { transaction, category } = this.state;\r\n\r\n\r\n        return (\r\n            <Container>\r\n                <dl>\r\n                    <InputLine>\r\n                        <LineTitle>Внести расход:</LineTitle>\r\n                        <LineInput>\r\n                            <Input\r\n                                name=\"transaction\"\r\n                                onChange={this.handleChangeInput}\r\n                                value={transaction || ''}\r\n                            />\r\n                        </LineInput>\r\n                    </InputLine>\r\n                    <InputLine>\r\n                        <LineTitle>Категория:</LineTitle>\r\n                        <LineInput>\r\n                            <Input\r\n                                name=\"category\"\r\n                                onChange={this.handleChangeInput}\r\n                                value={category || ''}\r\n                            />\r\n                        </LineInput>\r\n                    </InputLine>\r\n                </dl>\r\n                <Button onClick={this.handleEnter}>Внести</Button>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst Container = styled.article`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\nconst InputLine = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  line-height: 1.5;\r\n`;\r\nconst Input = styled.input`\r\n  font-family: 'Marmelad';\r\n  font-size: 20px;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-bottom: 1px solid white;\r\n  margin-left: 5px;\r\n  color: white;\r\n  width: 100%;\r\n  padding: 0;\r\n  margin: 0;\r\n`;\r\nconst LineTitle = styled.dt`\r\n  width: 150px;\r\n`;\r\nconst LineInput = styled.dd`\r\n  width: 150px;\r\n  margin: 0;\r\n`;\r\nconst Button = styled.button`\r\n  font-family: 'Marmelad';\r\n  color: white;\r\n  border: 1px solid white;\r\n  border-radius: 31px;\r\n  background-color: transparent;\r\n  margin: 3px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nexport default Expanse;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport class Incomes extends Component {\r\n    state = {\r\n        transaction: null,\r\n        category: null,\r\n    };\r\n\r\n    handleChangeInput = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    handleEnter = () => {\r\n        const { onSubmit } = this.props;\r\n        const { transaction, category } = this.state;\r\n\r\n        onSubmit(Math.abs(parseFloat(transaction)), category);\r\n        this.setState({ transaction: null, category: null });\r\n    }\r\n\r\n    render() {\r\n        const { transaction, category } = this.state;\r\n\r\n        return (\r\n            <Container>\r\n                <dl>\r\n                    <InputLine>\r\n                        <LineTitle>Внести доход:</LineTitle>\r\n                        <LineInput>\r\n                            <Input\r\n                                name=\"transaction\"\r\n                                onChange={this.handleChangeInput}\r\n                                value={transaction || ''}\r\n                            />\r\n                        </LineInput>\r\n                    </InputLine>\r\n                    <InputLine>\r\n                        <LineTitle>Категория:</LineTitle>\r\n                        <LineInput>\r\n                            <Input\r\n                                name=\"category\"\r\n                                onChange={this.handleChangeInput}\r\n                                value={category || ''}\r\n                            />\r\n                        </LineInput>\r\n                    </InputLine>\r\n                </dl>\r\n                <Button onClick={this.handleEnter}>Внести</Button>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst Container = styled.article`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\nconst InputLine = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  line-height: 1.5;\r\n`;\r\nconst Input = styled.input`\r\n  font-family: 'Marmelad';\r\n  font-size: 20px;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-bottom: 1px solid white;\r\n  margin-left: 5px;\r\n  color: white;\r\n  width: 100%;\r\n  padding: 0;\r\n  margin: 0;\r\n`;\r\nconst LineTitle = styled.dt`\r\n  width: 150px;\r\n`;\r\nconst LineInput = styled.dd`\r\n  width: 150px;\r\n  margin: 0;\r\n`;\r\nconst Button = styled.button`\r\n  font-family: 'Marmelad';\r\n  color: white;\r\n  border: 1px solid white;\r\n  border-radius: 31px;\r\n  background-color: transparent;\r\n  margin: 3px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  padding: 5px 20px;\r\n`;\r\n\r\nexport default Incomes;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Expanse from './Expanse';\nimport Incomes from './Incomes';\nimport moment from 'moment';\nimport styled from 'styled-components';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    let storageState = localStorage.getItem('state');\n    let initState;\n\n    if (storageState != null) {\n      storageState = JSON.parse(storageState);\n      initState = { ...storageState, date: moment(storageState.date) };\n    } else {\n      initState = {\n        date: moment(),\n        navSelected: 'incomes',\n        transactions: [],\n      };\n    }\n\n    this.state = initState;\n  }\n\n  handleAddDay = () => {\n    this.setState({ date: this.state.date.add(1, 'day') });\n  };\n\n  handleSubtractDay = () => {\n    this.setState({ date: this.state.date.subtract(1, 'day') });\n  };\n\n  handleNavClick = event => {\n    this.setState({ navSelected: event.target.getAttribute('name') });\n  };\n\n  handleSubmitTransaction = (sum, category) => {\n    const { date: TodayDate, transactions } = this.state;\n\n    const newTransaction = {\n      date: TodayDate.format('DD.MM.YYYY'),\n      category: category,\n      sum: sum,\n    };\n\n    const newTransactions = [...transactions, newTransaction];\n\n    newTransactions.sort((a, b) => {\n      const aDate = moment(a.date, 'DD.MM.YYYY');\n      const bDate = moment(b.date, 'DD.MM.YYYY');\n      return aDate.isAfter(bDate);\n    });\n\n    this.setState({ transactions: newTransactions });\n  };\n\n  componentDidUpdate() {\n    const { date } = this.state;\n    localStorage.setItem(\n      'state',\n      JSON.stringify({ ...this.state, date: date.format() }),\n    );\n  }\n\n  onToday = () => {\n    const { transactions, date } = this.state;\n\n    const currentMonthTransactions = transactions.filter(\n      ({ date: transactionDate }) =>\n        moment(transactionDate, 'DD.MM.YYYY').isSame(date, 'month'),\n    );\n\n    const dailyMoney =\n      currentMonthTransactions.reduce(\n        (acc, transaction) =>\n          transaction.sum > 0 ? transaction.sum + acc : acc,\n        0,\n      ) / moment(date).daysInMonth();\n\n    const transactionsBeforeThisDayAndInThisDay = currentMonthTransactions.filter(\n      ({ date: transactionDate }) =>\n        moment(transactionDate, 'DD.MM.YYYY').isBefore(\n          date,\n          'date',\n        ) ||\n        moment(transactionDate, 'DD.MM.YYYY').isSame(date, 'date'),\n    );\n\n    const expanseBeforeToday = transactionsBeforeThisDayAndInThisDay.reduce(\n      (acc, { sum }) => (sum < 0 ? acc + sum : acc),\n      0,\n    );\n\n    const incomeBeforeToday = date.date() * dailyMoney;\n\n    console.log({ dailyMoney, expanseBeforeToday, incomeBeforeToday });\n\n    return (incomeBeforeToday + expanseBeforeToday).toFixed(1);\n  };\n\n  render() {\n    const { date, navSelected, transactions } = this.state;\n    return (\n      <section>\n        <header>\n          <h1>Budget calculation</h1>\n          <div className=\"dataLine\">\n            <p>{date.format('DD.MM.YYYY')}</p>\n            <DateButton onClick={this.handleSubtractDay}>-</DateButton>\n            <DateButton onClick={this.handleAddDay}>+</DateButton>\n          </div>\n          <p>На сегодня: {this.onToday()}  грн.</p>\n        </header>\n        <main>\n          <Nav>\n            <Link\n              name=\"expanse\"\n              onClick={this.handleNavClick}\n              selected={navSelected === 'expanse'}\n            >\n              Расходы сегодня\n            </Link>\n\n            <Link\n              name=\"incomes\"\n              onClick={this.handleNavClick}\n              selected={navSelected === 'incomes'}\n            >\n              Доходы\n            </Link>\n          </Nav>\n\n          {navSelected === 'expanse' ? (\n            <Expanse onSubmit={this.handleSubmitTransaction} />\n          ) : (\n              <Incomes onSubmit={this.handleSubmitTransaction} />\n            )}\n\n          <Table>\n            <tbody>\n              {transactions\n                .filter(({ date: transactionDate }) =>\n                  moment(transactionDate, 'DD.MM.YYYY').isSame(\n                    date,\n                    'month',\n                  ),\n                )\n                .map(({ date, sum, category }, index) => (\n                  <tr key={index}>\n                    <td>{date}</td>\n                    <td>{sum} ₽</td>\n                    <td>{category}</td>\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n        </main>\n      </section>\n    );\n  }\n}\n\nconst DateButton = styled.button`\n  color: white;\n  border: 1px solid white;\n  border-radius: 50%;\n  background-color: transparent;\n  width: 32px;\n  height: 32px;\n  margin: 3px;\n  cursor: pointer;\n  text-align: center;\n`;\n\nconst Link = styled.span`\n  font-family: 'Marmelad';\n  cursor: pointer;\n  color: white;\n  margin: 0 8px;\n  border-bottom: ${({ selected }) =>\n    selected ? '2px solid white' : 'none'};\n`;\n\nconst Nav = styled.nav`\n  display: flex;\n  justify-content: center;\n  font-size: 25px;\n  padding: 40px 0 15px;\n`;\n\nconst Table = styled.table`\n  width: 450px;\n  text-align: right;\n  padding-top: 30px;\n  margin: 0 auto;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}